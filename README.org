* The idea behind CRAFREE
Usually by default you can use create-react-app to generate a react application.
While this is convinient, it makes it so you never learn whats under the hood.
And it also forces you to use the configuration dictated by create-react-app. 
This document will try and give a complete reference for how to create a react
app without using create-react-app. 

* Begining our journey with NPM
You have the choice of using either NPM or Yarn to manage your packages, we'll
use NPM in this guide since its used predominately in industry. So we'll begin
with running 

#+BEGIN_SRC bash
npm init -y
#+END_SRC

This will get us started by created a baseline package.json file which will 
house varying degrees of information. The primary use of *package.json* is to 
detail what packages are imported in by the project in order to work. These 
packages will have their version number listed in the corresponding 
*package-lock.json file*, and get installed in the node_modules folder. 
Another common use for package.json is to define *scripts*. There are other 
toolchains that make use of package.json to define properties such a *babel*. 
However we'll dicuss that more later. 

Since this is a react project the very first packages we're going to install 
are react and react-dom.

#+BEGIN_SRC bash
npm install react react-dom
#+END_SRC
* Introduction to Babel 
Generally one of packages developers will install when setting up
their projects is babel. So let's understand why we need babel in the first 
place. JavaScript is an every evolving language, there are supersets like
TypeScript, frameworks like React, additions and improvements such as classes
and arrow functions. Unfortunately while these features make development easier
they are not natively supported by the environments they are run in. Older
and even current browsers do not support many of these frameworks and features
natively. Thats where Babel comes in, Babel will transform JavaScript code that
is written using modern features and back port it to typically ES5 JS, which 
is supported by most browsers. But babel isn't exclcusively used for front-end
development. It can also be used to compile and port TypeScript code, so that
it can be run in Node Environments, since Node does not natively support TS. 
In summantion Babel takes in Source Code and parses it using its *Babylon*  
parser. This parser will then break down the code into an *Abstract Source Tree*
which will then be transformed into Browser/Node/Environement friendly code. 

#+BEGIN_SRC text
Source Code => Parse (Babylon) => Abstract Source Tree => Transform => Output
#+END_SRC 

In order to keep babel light-weight the transformations are done via babel 
plugins. These plugins help babel transform the AST into valid minified code. 
There are plugins for React, JSX, ES6, TypeScript, etc..  

/Note/
It can be cumbersome to install plugins individually, thankfully babel 
allows users to install *Presets* which are a group of plugins that Babel       
can then use for transpilation. 

** Installing Babel && Presets
Now that we know what Babel does, and why we need it. We can go ahead and 
install Babel as Babel Plugins/Presets. 

#+BEGIN_SRC bash
npm i @babel/core @babel/preset-env @babel/preset-react babel-loader -D
#+END_SRC

In the Era before Babel 6, there existed a singular npm babel package, named
babel. This package was split begining with Babel 6 into multiple packaged. 
- babel/core: Contains the NODE API and require hook. 
- babel/preset-env: Contains all plugins for transpiling ES6+ code. 
- babel/preset-react: Contains all the plugins for handling react code. 
- babel-loader: Needed to connect Babel to WebPack. (More on this later)

** Configuring Babel 
In order to configure babel, its best to create a .babelrc file into the root
of your project directory. You could also potentially configure babel in your
package.json file, but its usually best to seperate the logic. 

#+BEGIN_SRC JSON
{
    "presets": ["@babel/preset-env", "@babel/preset-react"]
}
#+END_SRC

Although we could continue to configure Babel, now would be a good time to 
take a break to install and set up WebPack which is another tool we'll heavily 
rely on. 

* Introduction to WebPack 
Before we begin anything lets talk  about why we even  need WebPack to begin 
with. Long ago JavaScript code was all written in one file, there was no ability
to break up portions of code and modularize them into seperate files. Luckily 
this is no longer the case, today we can break apart chunks of code and use 
imports and exports to create modulary reusable code. Now this is great when
you're running code server side, all your files are on the server and your
environment has access to all files. However when you serve your application to
a site, and a user then access that application they do not have access to 
your servers storage, instead they'd have to create request for each invidual 
JavaScript file that gets imported into your source code.

As you can  imagine these additional fetch request would slow down a websites
response time as well as eat up bandwidth/data. With the help of WebPack we 
can bundle and minimize all imports used within our code into one sigular file.
This means that users of your application need only make 1 request to recieve 
the entirety of your JavaScript source code. So now that we understand the 
importance of WebPack, lets get started with installing it. 

#+BEGIN_SRC bash
    npm install --save-dev webpack webpack-cli webpack-dev-server 
    npm install --save-dev html-webpack-plugin style-loader css-loader
#+END_SRC

Note The html-webpack-plugin generates an HTML File with your bundled code. 
** Connecting WebPack to Babel.
In order for WebPack to bundle all our JavaScript file we need to tell it where
to look as well as what compiler (Babel) we want it to use to compile the  code.
So lets start off with creating a webpack.config.js file in our root directory.

#+BEGIN_SRC JS
const HtmlWebpackPlugin = require("html-webpack-plugin");
const path = require("path");

module.exports = {
  entry: "./src/index.js",
  output: {
    filename: "bundle.[hash].js",
    path: path.resolve(__dirname, "dist"),
  },
  plugins: [
    new HtmlWebpackPlugin({
      template: "./src/index.html",
    }),
  ],
  resolve: {
    modules: [__dirname, "src", "node_modules"],
    extensions: ["*", ".js", ".jsx", ".tsx", ".ts"],
  },
  module: {
    rules: [
      {
        test: /\.jsx?$/,
        exclude: /node_modules/,
        loader: require.resolve("babel-loader"),
      },
      {
        test: /\.css$/,
        use: ["style-loader", "css-loader"],
      },
      {
        test: /\.png|svg|jpg|gif$/,
        use: ["file-loader"],
      },
    ],
  },
};
#+END_SRC 

** Setting up WebPack to load css files / image files. 
Previously we installed babel loader in order to tell WebPack that if you run
into a JS file use babel to transpile it. In reality JS files are not the only
thing we can import into our JS code, we can also import css. 

#+BEGIN_SRC JS
import './styles/main.css'
#+END_SRC

** Why Use CSS-loader && Style-Loader
However in order for WebPack to understand how to handle these css files we 
need to install the corresponding loader for that. In order to do this, we'll
need to install two loaders *style-loader* and *css-loader*. You may be 
wondering why do we need two loaders for our css, and thats because css-loader
is a plugin that helps webpack turn css files into valid javascript code, and
style-loader is a plugin which then takes that transpiled css and inserts it
into our html by injecting a style tag. 

*** Style Loader
#+BEGIN_SRC text
├── components 
│   │
│   ├── componentA
│   │   ├── style.css
│   │   └── index.js
│   │
│   ├── componentB
│   │   ├── style.css
│   │   └── index.js
│   │
│   └── componentC
│       ├── style.css
│       └── index.js
│   
├── index.js  
└── index.html
#+END_SRC

In order to understand the usefullness of style-loader lets consider for a 
moment a project directory structured in the following manner. Here each 
component has its own CSS file, that contains styles specific to that component. 
In order to load in these components our index.html would look something like 
this. 

#+BEGIN_SRC HTML
<link href="components/componentA/style.css" rel="stylesheet" type="text/css">
<link href="components/componentB/style.css" rel="stylesheet" type="text/css">
<link href="components/componentC/style.css" rel="stylesheet" type="text/css">
<script type="text/javascript" src="dist/bundle.js"></script>
#+END_SRC

Additionally our index.js would look something a lot like this. 
#+BEGIN_SRC js
import componentA() from './components/componentA'
import componentA() from './components/componentB'
import componentA() from './components/componentC'

export default function() {
    componentA()
    componentB()
    componentC()
}
#+END_SRC

Lets say down the road componentB is no longer needed, in order to remove all 
traces of componentB we'd have to remove it from both index.js and index.html
#+BEGIN_SRC HTML
<link href="components/componentA/style.css" rel="stylesheet" type="text/css">
<!--<link href="components/componentB/style.css" rel="stylesheet" type="text/css"> -->
<link href="components/componentC/style.css" rel="stylesheet" type="text/css">
<script type="text/javascript" src="dist/bundle.js"></script>
#+END_SRC

Additionally our index.js would look something a lot like this. 
#+BEGIN_SRC js
import componentA() from './components/componentA'
//import componentB() from './components/componentB'
import componentC() from './components/componentC'

export default function() {
    componentA()
    //componentB()
    componentC()
}
#+END_SRC

Often developers will usually just comment out the component from index.js
and leave the styles loaded into index.html. Style-loader can help with this
because with style-loader we no longer have to declare our css within our
index.html, instead style-loader will infer what css to inject into index.html
dynamically by seeing which components are used. So with style loader all we
need to do is comment out componentB from index.js.

*** CSS Modules using CSS-loader
If you're like me the explanation above probably left you with more questions. 
Why do we need to convert our css to a JS and then Inject it into our
HMTL? Why don't we just directly import our css in our HTML. How we write our 
CSS as developers has vastly changed over the years and been approved upon. 
These days developers suscribe to the idea of CSS Modules.
[[https://github.com/css-modules/css-modules][CSS Modules Concept]]. 

In short the idea is simple. Say we within our React App we have two components
componentA & componentB. Lets say we want to create two seperate css files to 
house the styles for each component. 

# componentA/style.css
#+BEGIN_SRC css
.wrapper {
  background-color: blue;
}

.specificToComponentA {
  // rest of the styles. 
}
#+END_SRC

# componentB/style.css
#+BEGIN_SRC css
.wrapper {
  background-color: red;
}

.specificToComponentB {
  // rest of the styles. 
}
#+END_SRC

# Then our component A would look like this. 
#+BEGIN_SRC JS
import './style.css';

export default function() {
  return <div className="wrapper">
    <div className="specificToComponentA">componentA</div>
  </div>
}
#+END_SRC

# Then our component B would look like this. 
#+BEGIN_SRC JS
import './style.css'

export default function() {
  return <div className="wrapper">
    <div className="specificToComponentB">componentB</div>
  </div>
}
#+END_SRC

What will the background color of these components be? The answer is not obvious
because of a problem known as *leaking styles*, Its not obvious if the color
will be blue or red because we have no idea the order in which these style 
sheets will be loaded via style loader. CSS Modules fix this issue. 

#+BEGIN_SRC JS
// CSS Modules in componentA
import s from './styles.css'

export default function() {
    return <div className="${s.wrapper}">
        <div className="${s.specificToComponentA}">Component A</div>
    </div>
}
#+END_SRC

#+BEGIN_SRC JS
// Exported Object S
{
    wrapper: "WO0HHIhH77",
    specificToComponentA: "jPYPsVTDZU"
}
#+END_SRC

Note how a unique string is generated for the wrapper class, and its this unique
name that ends up getting injected into our HTML. Component B would also 
generate a unique name for its own wrapper class, this is how css modules 
prevent css leakage. This is why we need css-loader it allows us to modularize
and encapsulate our css logic. 

* Sources
Scratch Setup for React
https://www.youtube.com/watch?v=EUM78cxo0i8

Style-loader and Css-Loader explanation
https://stackoverflow.com/questions/41878057/what-is-the-purpose-of-css-loader-in-webpack

Babel Tutorial
https://www.youtube.com/watch?v=JJzrWJ83ey8
